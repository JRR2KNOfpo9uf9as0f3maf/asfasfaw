-- config.lua

local config = {}

config.settings = {
    output_suffix = "_obfuscated.lua",
    watermark_enabled = false,
    final_print = true,

    -- ðŸ”¹ Virtual Machine (DIMATIKAN supaya tidak berat, tapi tetap aman)
    VirtualMachine = {
        enabled = false,
    },

    -- ðŸ”¹ Control Flow (Membuat kode lebih sulit dipahami, tapi tetap ringan)
    control_flow = {
        enabled = true,
        max_fake_blocks = 2, -- Tidak terlalu banyak biar ringan
    },

    -- ðŸ”¹ String to Expressions (Mengubah teks menjadi angka supaya sulit dibaca)
    StringToExpressions = {
        enabled = true,
        min_number_length = 5, 
        max_number_length = 15, 
    },

    -- ðŸ”¹ String Encoding (Menyembunyikan string dalam kode)
    string_encoding = {
        enabled = true, -- AKTIF supaya string tidak bisa dibaca
    },

    -- ðŸ”¹ Bungkus Semua Kode dalam Function (Supaya lebih sulit didecompile)
    WrapInFunction = {
        enabled = true,
    },

    -- ðŸ”¹ Variable Renaming (Mengacak nama variabel agar tidak dikenali)
    variable_renaming = {
        enabled = true,
        min_name_length = 5,  -- Jangan terlalu pendek supaya sulit ditebak
        max_name_length = 10, 
    },

    -- ðŸ”¹ Hapus Garbage Code Supaya Tidak Berat
    garbage_code = {
        enabled = false, 
        garbage_blocks = 0, 
    },

    -- ðŸ”¹ Opaque Predicates (Menyembunyikan kondisi IF agar lebih sulit dianalisis)
    opaque_predicates = {
        enabled = true, -- AKTIF untuk proteksi ekstra
    },

    -- ðŸ”¹ Bytecode Encoding (Membuat bytecode lebih sulit dibaca)
    bytecode_encoding = {
        enabled = true,
    },

    -- ðŸ”¹ Compressor (DIMATIKAN supaya tidak memperlambat eksekusi)
    compressor = {
        enabled = false,
    }
}

function config.get(key)
    local keys = {}
    for k in key:gmatch("[^.]+") do table.insert(keys, k) end

    local value = config
    for _, k in ipairs(keys) do
        value = value[k]
        if value == nil then
            return nil
        end
    end
    return value
end

function config.set(key, new_value)
    local keys = {}
    for k in key:gmatch("[^.]+") do table.insert(keys, k) end

    local value = config
    for i = 1, #keys - 1 do
        value = value[keys[i]]
        if value == nil then
            return false
        end
    end

    local last_key = keys[#keys]
    if value[last_key] ~= nil then
        value[last_key] = new_value
        return true
    else
        return false
    end
end

return config
